import sys
import os
# import cPickle
###############
import ConfigParser
# reload(ConfigParser)
import esget_logger
# reload(esget_logger)
import esget_db
reload(esget_db)
import esget_esgf
# reload(esget_esgf)
import esget_fs
# reload(esget_fs)
import esget_wget
# reload(esget_wget)
import esget_local_files
# reload(esget_local_files)

import re

RESETDB = False

config = ConfigParser.SafeConfigParser()
configfile = os.path.join("../config", "cordex_eur_ALL.cfg")
config.read(configfile)
config.set('Paths', 'logfile', '../log/debug.log')
esget_logger.Logging(config)

esget_logger.logfile = "../log/DEBUG.log"
C = esget_db.EsgetDB(config)
C.dbname = "../db/cordex_eur_ALL.db"
C.init_db(reset=True if RESETDB else False)

conn, c = C.connect()
rows = list(c.execute('''SELECT ROWID, filename FROM localfiles
WHERE unlink_date != 0'''))


# fixes double-unlink path in filename



def chfn(fn):
    if fn.count("unlinked") == 2:
        newfn = re.sub('/unlinked/2015-01-19', '', fn, count=1)
        return(newfn)
    else:
        return(fn)

newrows = [(x[0], chfn(x[1])) for x in rows]


    

def check_unlink_path(fn):
    ma = re.search("unlinked", fn)
    return(ma)


print(chfn(rows[2][1]))

newrows = [(x[0], chfn(x[1])) for x in rows]


# newrows = [(x[0], re.sub('/unlinked/2015-01-19',
#                         '', x[1])) for x in rows]




# fname = ulfiles_cursor.next()

# import re
# def fixfilename(fn):
#     conn, c = C.connect()
#     ulfiles_cursor = list(c.execute('''SELECT filename FROM localfiles
# WHERE unlink_date != 0'''))

#     for fname in ulfiles_cursor[0]:
#         newfname = re.sub("/unlinked/2015-01-19", '', fname, count=1)
        

    

# print(fname[0])
# fname_mod = C.storpath2rempath(fname[0])
# print(fname_mod)



# /data/CORDEX/unlinked/2015-01-19/unlinked/2015-01-19/EUR-11/evaluation/day/evspsbl/CLMcom/ECMWF-ERAINT/CCLM4-8-17/r1i1p1/1/evspsbl_EUR-11_ECMWF-ERAINT_evaluation_r1i1p1_CLMcom-CCLM4-8-17_v1_day_19890101-19901231.nc

# # ulfiles = [self.storpath2rempath(x[0]) for x in ulfiles]
# # conn.close()
